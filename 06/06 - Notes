Detecting the Types

1. Detecting char

A char literal is a single ASCII character (0-127).

It should be printable (32-126) for output; otherwise, print "Non displayable".

To check if input is a char:

The input must be a single character.

If the input is a digit ('0' to '9'), it should not be treated as a char, since it could be an int.

Use std::isprint() to determine if it's printable.

2. Detecting int

It must be a whole number with only digits (-?[0-9]+).

No decimal points or f at the end.

It may have a leading - for negative numbers.

Use std::stoi() to check validity.

Check for overflow using std::numeric_limits<int>::max() and min().

3. Detecting float

Must end with f (e.g., "42.0f").

Can have a leading sign (+/-).

Contains digits and exactly one decimal point.

Use std::stof() to check validity.

Floats are limited in precision, so beware of rounding.

4. Detecting double

Similar to float, but without f at the end (e.g., "42.0").

Contains digits and one decimal point.

Use std::stod() for validation.

---

Special Cases: nan, inf, and Their Variants

These are floating-point special values used to represent exceptional conditions.

1. NaN (Not a Number)
Represents an undefined mathematical result (e.g., 0/0, sqrt(-1)).

Variations:

"nan" (double)

"nanf" (float)

2. Infinity (inf)
Represents a value too large for floating-point representation.

Variations:

"inf" / "+inf" / "-inf" (double)

"inff" / "+inff" / "-inff" (float)

Can check using std::isinf().

How to Detect These Special Cases
Convert the string to lowercase and check:

"nan" → double

"nanf" → float

"+inf", "-inf" → double

"+inff", "-inff" → float

--------------------------------------------------------------------------------------

Typecasting hierarchy

Widening conversions (e.g., char → int → float → double) are safe in terms of data preservation.

Narrowing conversions (e.g., double → float → int → char) can result in:
- Precision loss, truncation, overflow/underflow, undefined behavior (especially with char)

--------------------------------------------------------------------------------------

static_cast<T>(value) converts value into the specified type T, ensuring it follows the rules of type conversion.

When you static_cast a value, it gets stored in memory using the size and representation of the target type.

What actually happens during static_cast?

Memory Representation Changes:

When converting from double to float, the precision is truncated to fit within float's 32-bit representation.

When converting from int to char, only the least significant byte (LSB) is retained.

Data Loss & Overflow Risks:

double → int: The decimal part is dropped (not rounded).

int → char: If the integer is outside char's range (0-255 for unsigned char, -128 to 127 for signed char), it overflows.


Example:

double d = 42.99;
int i = static_cast<int>(d);
std::cout << "int: " << i << std::endl; // Output: int: 42 (truncation happens)

float f = static_cast<float>(d);
std::cout << "float: " << f << "f" << std::endl; // Output: float: 42.99f (if precision allows)


Does static_cast change the actual memory?
Yes! When casting, the value is reinterpreted in the memory layout of the new type. This is why:

char takes 1 byte (8 bits).

int takes 4 bytes (32 bits).

float takes 4 bytes, but follows IEEE 754 floating-point representation.

double takes 8 bytes (64 bits).

--------------------------------------------------------------------------------------

Summary of Overflow Handling:
Function	Overflow Value				Underflow Value		Error Setting
strtol		LONG_MAX / LONG_MIN			None				ERANGE
strtod		HUGE_VAL / -HUGE_VAL		0.0					ERANGE
strtof		HUGE_VALF / -HUGE_VALF		0.0					ERANGE
