Exercise 00

This exercise is designed to introduce you to subtype polymorphism (also known as runtime polymorphism) in C++.

Polymorphism allows you to use a base class pointer or reference to interact with derived class objects in a way that calls the correct function at runtime.
This is crucial for writing flexible and scalable code.

~~~~~

Key Concept: Virtual Functions
If a base class function is not virtual, the function that gets called depends on the type of the pointer, not the actual object.
If a base class function is virtual, the function that gets called depends on the actual type of the object, enabling true polymorphism.

Without Virtual Functions
If makeSound() is not virtual, calling it through a base class pointer will execute the base class’s version, even if the object is a WrongCat.

const WrongAnimal* wrong = new WrongCat();
wrong->makeSound();  // This will call WrongAnimal's makeSound(), not WrongCat's!

This demonstrates how polymorphism fails without virtual.

~~~~~

Why Do We Need a Virtual Destructor?
A virtual destructor ensures that when you delete a derived class object through a base class pointer, the correct destructor gets called.

Without a virtual destructor, only the base class destructor runs, which can cause memory leaks or undefined behavior if the derived class allocates dynamic memory.

Example: What Happens Without a Virtual Destructor?

class Base {
public:
    Base() { std::cout << "Base Constructor\n"; }
    ~Base() { std::cout << "Base Destructor\n"; } // ❌ Not virtual!
};

class Derived : public Base {
public:
    Derived() { std::cout << "Derived Constructor\n"; }
    ~Derived() { std::cout << "Derived Destructor\n"; }
};

int main() {
    Base* obj = new Derived();
    delete obj;  // Only Base's destructor gets called!
}
Output:

Base Constructor
Derived Constructor
Base Destructor  // ❌ Derived destructor never runs!

The Derived destructor is never called because ~Base() is not virtual.
If Derived allocated dynamic memory in its constructor, it would never be freed → Memory leak!

~~~

With virtual destructor

class Base {
public:
    Base() { std::cout << "Base Constructor\n"; }
    virtual ~Base() { std::cout << "Base Destructor\n"; } // ✅ Virtual!
};

Output:

Base Constructor
Derived Constructor
Derived Destructor  // ✅ Derived is properly destroyed
Base Destructor

~~~~~

What Does virtual Actually Do?
The virtual keyword tells the compiler to use dynamic dispatch instead of static binding.

Without virtual, function calls are resolved at compile time based on the type of the pointer (Base*).
With virtual, function calls are resolved at runtime based on the actual object (Derived).

How This Relates to Virtual Destructors
When you delete a base class pointer, the destructor is also resolved dynamically.
If the destructor is not virtual, only the base class’s destructor runs.
If the destructor is virtual, it ensures that the derived class destructor is called first, followed by the base class destructor.

~~~~~

Why Don’t We Make the Entire Orthodox Canonical Form (OCF) Virtual?

Only the destructor is usually marked as virtual, because:

Constructors cannot be virtual. The compiler needs to know at compile-time which constructor to call.
Copy constructors and assignment operators don’t need polymorphism.
These functions work at the object level, not through a base class pointer.
If you need polymorphic copying, you should use a clone() method instead.

✔ Virtual destructors prevent memory leaks by ensuring derived class destructors run.
✔ Without a virtual destructor, deleting a derived object through a base class pointer results in incomplete destruction.

--------------------------------------------------------------------------------------

Exercise 01

 For regular data types like integers and strings (in most cases), shallow vs. deep copies aren't a concern because they are copied by value. But when dealing with dynamically allocated memory (like arrays or objects allocated with new), shallow vs. deep copying becomes crucial.

Shallow Copy vs. Deep Copy
1. Shallow Copy
A shallow copy copies only the pointer, not the actual data it points to. This means multiple objects will share the same memory.

Example:

class Shallow {
public:
    int* ptr;
    Shallow(int val) { ptr = new int(val); }
    ~Shallow() { delete ptr; }
};

int main() {
    Shallow a(42);
    Shallow b = a; // Default copy constructor does shallow copy
}
➡️ Problem: b will point to the same int as a. When b is destroyed, it deletes the memory, and then when a is destroyed, it tries to delete the same memory again, leading to a double free error.


2. Deep Copy
A deep copy creates a new independent copy of the dynamically allocated data.

Example:

class Deep {
public:
    int* ptr;
    Deep(int val) { ptr = new int(val); }

    // Custom copy constructor for deep copy
    Deep(const Deep& other) {
        ptr = new int(*other.ptr); // Allocate new memory & copy value
    }

	// *other.ptr → Dereferences the old pointer to get the actual value.
	// new int(...) → Allocates new memory and stores that value.

    ~Deep() { delete ptr; }
};

int main() {
    Deep a(42);
    Deep b = a; // Deep copy, so b.ptr is a new independent allocation
}
➡️ No memory corruption, because b has its own int copy.


Why It Matters for Arrays (Brain Class in Your Exercise)
In your exercise, the Brain class contains an array of 100 std::string. If you use a shallow copy, both instances will share the same array, leading to:

Unexpected modifications: If one object modifies an idea, the other sees the change.
Double deletion: When the second object is destroyed, it tries to delete the same memory again.
To avoid this, you must implement a custom copy constructor and copy assignment operator in Brain to perform a deep copy.


Key Syntax Difference
Shallow Copy							Deep Copy
Uses default copy constructor			Has a custom copy constructor
Copies only the pointer (not the data)	Allocates new memory and copies the data
Two objects share the same memory		Each object has its own independent memory
Dangerous when objects go out of scope	Safe memory management

--------------------------------------------------------------------------------------

An abstract class is a class that cannot be instantiated on its own. It is meant to be a base class for other classes to inherit from.

To make a class abstract in C++, you declare at least one pure virtual function, like this:

class AAnimal {
public:
    virtual void makeSound() const = 0; // Pure virtual function
};

The = 0 part means this function must be implemented by any derived class (like Dog or Cat).
If a class has at least one pure virtual function, it cannot be instantiated.
