Inheritance

What Happens Behind the Scenes When a Derived Class Inherits a Base Class?

When a derived class inherits from a base class, the compiler ensures that the base
class part is constructed first before the derived class part is created.
This happens in one single object, not two separate objects.

1. One Object, Not Two
Even though a base class is constructed first, it is not a separate object—rather,
it is a part of the derived class object. You can think of it as a substructure inside the derived class.

For example, consider:

class Base {
public:
    int x;
    Base() { std::cout << "Base constructor called\n"; }
};

class Derived : public Base {
public:
    int y;
    Derived() { std::cout << "Derived constructor called\n"; }
};

int main() {
    Derived d;
    return 0;
}

Behind the scenes, the memory layout of d looks something like this:

+----------------+
| Base::x        |  <-- Base part
+----------------+
| Derived::y     |  <-- Derived part
+----------------+
The object d contains both Base::x and Derived::y, all within one single object.

2. How the Base Class Constructor is Called
When you create an object of Derived, the Base class constructor runs first before the Derived constructor runs.
This ensures that any base class properties are initialized before the derived class tries to use them.

✔ Behind the scenes:
1️⃣ Memory is allocated for one object containing both the base and derived class parts.
2️⃣ The Base class constructor is called first.
3️⃣ The Derived class constructor runs next.
4️⃣ The object is now fully initialized.

✔ Destruction happens in reverse order:
1️⃣ The Derived class destructor runs first.
2️⃣ The Base class destructor runs afterward.

3. How the Derived Class Accesses Base Class Members
The derived class can access public and protected members of the base class as if they were its own.

For example:

class Base {
public:
    int x;
    void show() { std::cout << "Base x = " << x << std::endl; }
};

class Derived : public Base {
public:
    void setX(int value) { x = value; }  // Direct access to Base's x
};
The Derived class can directly use x because it is inherited from Base.
It can also call Base::show() since that function is public.

Summary
✔ There is only ONE object, but it has a base-class subobject inside it.
✔ The Base class is constructed first, and then the Derived class.
✔ The Derived class accesses base class members as if they were part of itself.
✔ When destroyed, the Derived destructor runs first, followed by the Base destructor.

--------------------------------------------------------------------------------------------------------------

The Diamond Inheritance Problem (Simple Explanation)

Imagine you have a base class called A. Then, two classes (B and C) inherit from A. Finally, another class D inherits from both B and C.

class A { public: int value; };
class B : public A {};
class C : public A {};
class D : public B, public C {};  // Uh-oh! Diamond problem!
Now, D has two copies of A—one from B and one from C. This means:

There are two value variables inside D.
If you try to access value, the compiler doesn’t know which one you mean (B::A::value or C::A::value?).
This is called the diamond problem because of how the inheritance structure looks like a diamond:

       A
      / \
     B   C
      \ /
       D

How virtual Fixes This
If we mark A as a virtual base class, it ensures that only one instance of A exists, no matter how many classes inherit from it.

class A { public: int value; };
class B : virtual public A {};
class C : virtual public A {};
class D : public B, public C {};  // Fixed with virtual inheritance
Now, D has only one A instance, so there’s no ambiguity when accessing value.

What Does virtual Do Behind the Scenes?
Instead of each derived class (B and C) creating its own A instance, a single shared A instance is used.
A "virtual table" (vtable) is created to ensure that all references to A point to the correct shared instance.
When D is created, the compiler ensures that A is initialized only once, even though D inherits from both B and C.

What Is A Virtual Table
In computer programming, a virtual method table (VMT), virtual function table, virtual call table, dispatch table,
vtable, or vftable is a mechanism used in a programming language to support dynamic dispatch (or run-time method binding).

Whenever a class defines a virtual function (or method), most compilers add a hidden member variable to the class that
points to an array of pointers to (virtual) functions called the virtual method table. These pointers are used at runtime
to invoke the appropriate function implementations, because at compile time it may not yet be known if the base function
is to be called or a derived one implemented by a class that inherits from the base class.

V-tables (or virtual tables) are how most C++ implementations do polymorphism. For each concrete implementation of a class,
there is a table of function pointers to all the virtual methods. A pointer to this table (called the virtual table) exists
as a data member in all the objects. When one calls a virtual method, we lookup the object's v-table and call the appropriate
derived class method.

✅ The Base and Derived classes have separate vtables.
✅ The Derived class's vtable starts as a copy of the Base class's vtable.
✅ If the Derived class overrides a function, the entry in its vtable is updated.
✅ Every object has a hidden vptr that points to the correct vtable at runtime.

Key Takeaways
Without virtual inheritance: Each derived class (B and C) creates its own copy of A, causing duplication and ambiguity.
With virtual inheritance: Only one instance of A exists, and D correctly accesses it.
Behind the scenes, the compiler uses a virtual table (vtable) to ensure correct access.

~~~~~

Initially, without virtual, both B and C separately create their own instances of A, leading to two copies inside D:

A  (from B)
B
A  (from C)
C
D

With virtual, B still declares that it needs A, but instead of creating a new instance,
it just marks it as shared. When C checks, it sees that A already exists and reuses the same instance,
leading to this layout:

A  (one shared instance)
B
C
D

So yes, the vtable helps ensure that all references to A point to the same memory location
instead of creating duplicates. That way, D doesn’t get confused about which A to use.

~~~~~

The order of base classes does matter when resolving inheritance chains and constructors.
For example:

class A { };
class B { };
class C : public A, public B { };  // A is constructed before B
class D : public B, public A { };  // B is constructed before A

Changing the order of inheritance affects construction and memory layout.

--------------------------------------------------------------------------------------------------------------

Do you know the -Wshadow and -Wno-shadow compiler flags?

What is -Wshadow?
-Wshadow is a compiler warning that detects when a local variable or function parameter has
the same name as a variable in an outer scope (like a member variable of a class or a global variable).
This can lead to confusion and unintended behavior.

Example of shadowing:

#include <iostream>

class ClapTrap {
private:
    int hp;  // Member variable
public:
    ClapTrap(int hp) {  // Constructor parameter with the same name
        hp = hp;  // Oops! This does nothing because of shadowing
    }

    void setHp(int hp) {  // Function parameter with the same name
        hp = hp;  // Oops! Again, this does nothing
    }
};

🔴 Why is this a problem?
In both cases, hp inside the function refers only to the parameter and not to the class member.
To fix this, we should use this->hp = hp; to clearly refer to the member variable.

What is -Wno-shadow?
-Wno-shadow disables the warning, meaning the compiler won't notify you about shadowed variables.

📌 When would you use -Wno-shadow?

If you don't care about shadowing warnings.
If you're working with old code that uses shadowing a lot and you don’t want to see the warnings.
📌 When should you use -Wshadow?

When you want to avoid accidental mistakes.
When working on large projects where shadowing can lead to subtle bugs.

~~~~~

-Wshadow only warns when a local variable (inside a function or block) has the same name as a class member:

class Test {
    int x;
public:
    void setX(int x) {  // <- Warning: x shadows member variable
        x = x;          // No effect because x is shadowed
    }
};

If you only shadow variables via inheritance (like DiamondTrap::_name hiding ClapTrap::_name), -Wshadow does not trigger a warning.
The flag is designed for local vs. member conflicts, not inheritance-based shadowing.

--------------------------------------------------------------------------------------------------------------

Key Observations from Your Experiment

DiamondTrap has its own _name, separate from the inherited ClapTrap::_name.
If you modify ClapTrap::_name, ScavTrap and FragTrap see the updated value,
but DiamondTrap::_name remains unchanged because it is an independent variable.

Variable name precedence:
When two variables with the same name exist in a class hierarchy,
the most derived class' variable shadows the inherited one.
Accessing ClapTrap::_name inside DiamondTrap is not possible directly via this->_name because
this->_name refers only to DiamondTrap's own variable.

How to Interact with the Inherited _name
Even though this->_name will always refer to DiamondTrap::_name, you can still interact
with ClapTrap::_name explicitly:

std::cout << "DiamondTrap name: " << this->_name << std::endl;
std::cout << "ClapTrap name: " << ClapTrap::_name << std::endl;

Here, ClapTrap::_name accesses the inherited variable from ClapTrap, bypassing DiamondTrap::_name.

Why This Matters
This principle is important because shadowing inherited variables can lead to unexpected behavior,
especially when dealing with functions that rely on those variables.

In cases like this, it's often better to avoid naming conflicts or explicitly use getter functions
from the base class to maintain clarity:

std::cout << "ClapTrap name: " << ClapTrap::getName() << std::endl;

This ensures DiamondTrap can still interact with the base class's version of the variable even if it has its own.
